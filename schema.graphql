"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Error {
  message: String!
}

type Mutation {
  createTask(name: String!): MutationCreateTaskResult!
  deleteUser(email: String, id: Int): MutationDeleteUserResult!
  login(email: String!, password: String!): MutationLoginResult!
  signUp(email: String!, name: String, password: String!): MutationSignUpResult!
  verifyJwt(value: String!): MutationVerifyJwtResult!
}

union MutationCreateTaskResult = Error | MutationCreateTaskSuccess

type MutationCreateTaskSuccess {
  data: Task!
}

union MutationDeleteUserResult = Error | MutationDeleteUserSuccess

type MutationDeleteUserSuccess {
  data: User!
}

union MutationLoginResult = Error | MutationLoginSuccess

type MutationLoginSuccess {
  data: UserAuth!
}

union MutationSignUpResult = Error | MutationSignUpSuccess

type MutationSignUpSuccess {
  data: User!
}

union MutationVerifyJwtResult = Error | MutationVerifyJwtSuccess

type MutationVerifyJwtSuccess {
  data: User!
}

type Query {
  allUsers: QueryAllUsersResult!
  authGetTasks: QueryAuthGetTasksResult!
}

union QueryAllUsersResult = Error | QueryAllUsersSuccess

type QueryAllUsersSuccess {
  data: [User!]!
}

union QueryAuthGetTasksResult = Error | QueryAuthGetTasksSuccess

type QueryAuthGetTasksSuccess {
  data: [Task!]!
}

type Subscription {
  userUpdate: UserSubscription!
}

enum SubscriptionAction {
  CREATED
  DELETED
  LOGGED_IN
  SIGNED_UP
}

interface SubscriptionEvent {
  action: SubscriptionAction!
}

type Task {
  completed: Boolean!
  createdAt: DateTime!
  id: Int!
  name: String!
  user: User!
}

type User {
  authScope: String!
  email: String!
  id: Int
  name: String
}

type UserAuth {
  jwt: String!
  user: User!
}

input UserCreateInput {
  email: String!
  name: String
  password: String!
}

type UserSubscription implements SubscriptionEvent {
  action: SubscriptionAction!
  user: User!
}